# Create a static library, which is used for unit tests and the final shared library.
add_library(intercept_a OBJECT
        source/Application.cc
        source/Report.cc
        source/Reporter.cc
        source/Services.cc
        source/Session.cc
        source/SessionWrapper.cc
        )

if (SUPPORT_PRELOAD)
    target_sources(intercept_a PRIVATE source/SessionLibrary.cc)
endif()

target_include_directories(intercept_a PUBLIC source/)
target_link_libraries(intercept_a PUBLIC result_a)
target_link_libraries(intercept_a PUBLIC flags_a)
target_link_libraries(intercept_a PUBLIC rpc_a)
target_link_libraries(intercept_a PUBLIC sys_a)
target_link_libraries(intercept_a PUBLIC nlohmann_json::nlohmann_json)
target_link_libraries(intercept_a PUBLIC spdlog::spdlog)
target_link_libraries(intercept_a PUBLIC wrapper_api)
if (SUPPORT_PRELOAD)
    target_link_libraries(intercept_a PUBLIC er_api)
    target_link_libraries(intercept_a PUBLIC exec_api)
endif()

# Create an executable from the sub projects.
add_executable(intercept
        main.cc
        )

target_link_libraries(intercept intercept_a)
target_link_libraries(intercept rpc_a)
target_link_libraries(intercept sys_a)
target_link_libraries(intercept flags_a)

include(GNUInstallDirs)
install(TARGETS intercept
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

# Create unit test
if (ENABLE_UNIT_TESTS)
    add_executable(intercept_unit_test
            test/ReporterTest.cc
            test/SessionTest.cc
            )

    target_link_libraries(intercept_unit_test intercept_a)
    target_link_libraries(intercept_unit_test rpc_a)
    target_link_libraries(intercept_unit_test sys_a)
    target_link_libraries(intercept_unit_test PkgConfig::GTest ${CMAKE_THREAD_LIBS_INIT})

    add_test(NAME bear::intercept_unit_test COMMAND $<TARGET_FILE:intercept_unit_test>)
endif ()
