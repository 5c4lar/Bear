#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import argparse
import json
import logging


def main():
    logging.basicConfig(format="assert_intercepted: %(message)s", level=logging.INFO)

    parser = argparse.ArgumentParser()
    parser.add_argument(dest='file', type=argparse.FileType(mode='r'))
    subparsers = parser.add_subparsers(dest='command')
    count_parser = subparsers.add_parser('count').add_mutually_exclusive_group()
    count_parser.add_argument('-eq', dest='eq', type=int)
    count_parser.add_argument('-gt', dest='gt', type=int)
    count_parser.add_argument('-ge', dest='ge', type=int)
    count_parser.add_argument('-lt', dest='lt', type=int)
    count_parser.add_argument('-le', dest='le', type=int)
    entry_parser = subparsers.add_parser('contains')
    entry_parser.add_argument('-program')
    entry_parser.add_argument('-working_dir')
    entry_parser.add_argument('-arguments', nargs=argparse.REMAINDER)
    args = parser.parse_args()
    logging.debug(args)

    content = json.load(args.file)
    commands = [execution['command'] for execution in content['executions']]
    if args.command == 'count':
        count = len(commands)
        logging.debug("%s has %d command entries", args.file.name, count)
        if args.eq is not None and args.eq != count:
            logging.info('failed: expected %d, but got %d', args.eq, count)
            return 1
        elif args.gt is not None and args.gt >= count:
            logging.info('failed: expected greater than %d, but got %d', args.gt, count)
            return 1
        elif args.ge is not None and args.ge > count:
            logging.info('failed: expected greater or equal %d, but got %d', args.ge, count)
            return 1
        elif args.lt is not None and args.lt <= count:
            logging.info('failed: expected less than %d, but got %d', args.lt, count)
            return 1
        elif args.le is not None and args.le < count:
            logging.info('failed: expected less or equal %d, but got %d', args.le, count)
            return 1

    elif args.command == 'contains':
        logging.debug("%s has command entries: %s", args.file.name, commands)
        check = filter_from(args)
        count = len([cmd for cmd in commands if check(cmd)])
        if count == 0:
            logging.info('failed: expected at least entry, but found none')
            return 1

    return 0


def filter_from(args):
    def test(command):
        p1 = True if args.program is None else command['program'] == args.program
        p2 = True if args.working_dir is None else command['working_dir'] == args.working_dir
        p3 = True if args.arguments is None else command['arguments'] == args.arguments
        return p1 and p2 and p3

    return test


if __name__ == "__main__":
    sys.exit(main())