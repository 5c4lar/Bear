# -*- coding: utf-8 -*-

import sys
import re
import os.path
import subprocess
import lit.util

this_dir = os.path.dirname(__file__)
project_dir = os.path.dirname(this_dir)

# Input parameters for this test module are:
#
# _BEAR_BIN_DIR   : the directory where the `bear` and `intercept` installed.
#                   (this is necessary only if these files are not in the `PATH`.)
# _TEST_EXEC_ROOT : the test execution root directory (optional)
# MULTILIB        : run some test with 32 bit build tools (optional)
#
config.name = 'bear'

config.test_format = lit.formats.ShTest()
config.test_source_root = this_dir

if '_TEST_EXEC_ROOT' in lit_config.params:
    config.test_exec_root = lit_config.params['_TEST_EXEC_ROOT']
else:
    import tempfile
    config.test_exec_root = tempfile.mkdtemp(prefix='bear-')


config.suffixes = ['.ft', '.fts', '.ftp']
config.excludes = []

config.environment['LC_CTYPE'] = 'en_US.UTF-8'
config.environment['PATH'] = os.environ.get('PATH')

# add bear install directory in case if it's not in the path
if '_BEAR_BIN_DIR' in lit_config.params:
    bin_dir = lit_config.params['_BEAR_BIN_DIR']
    config.environment['PATH'] = ":".join([bin_dir, config.environment['PATH']])


config.substitutions.append(
    ('%{python}', sys.executable)
)
config.substitutions.append(
    ('%{bear}', 'bear -vvvv')
)
config.substitutions.append(
    ('%{intercept}', 'intercept --verbose')
)


def is_available(program):
    try:
        subprocess.call([program, '--version'], stdout=subprocess.PIPE)
    except:
        return False
    else:
        return True

if is_available('scons'):
    config.available_features.add('scons')

if is_available('qmake-qt4'):
    config.available_features.add('qmake')
    config.substitutions.append(('%{qmake}', 'qmake-qt4'))
elif is_available('qmake-qt5'):
    config.available_features.add('qmake')
    config.substitutions.append(('%{qmake}', 'qmake-qt5'))
elif is_available('qmake'):
    config.available_features.add('qmake')
    config.substitutions.append(('%{qmake}', 'qmake'))

if is_available('make'):
    config.available_features.add('make')
    config.substitutions.append(('%{make}', 'make'))
elif is_available('mingw32-make'):
    config.available_features.add('make')
    config.substitutions.append(('%{make}', 'mingw32-make'))

if is_available('gfortran'):
    config.available_features.add('fortran')

if is_available('nvcc'):
    config.available_features.add('cuda')

# classify os script language
is_windows = sys.platform in {'win32', 'cygwin'}
if is_windows:
    config.available_features.add('batch')
    config.suffixes.append('.bat')
    config.environment['windows'] = 'True'
else:
    config.available_features.add('shell')
    config.suffixes.append('.fts')


# check for library preload is available
def is_preload_disabled():
    # type: (str) -> bool
    """ Library-based interposition will fail silently if SIP is enabled,
    so this should be detected. You can detect whether SIP is enabled on
    Darwin by checking whether (1) there is a binary called 'csrutil' in
    the path and, if so, (2) whether the output of executing 'csrutil status'
    contains 'System Integrity Protection status: enabled'.

    :param platform: name of the platform (returned by sys.platform),
    :return: True if library preload will fail by the dynamic linker. """

    if is_windows:
        return True
    elif sys.platform == 'darwin':
        command = ['csrutil', 'status']
        pattern = re.compile(r'System Integrity Protection status:\s+enabled')
        try:
            output = subprocess.check_output(command, stderr=subprocess.STDOUT)
            return any(pattern.match(line) for line in output.splitlines())
        except (OSError, subprocess.CalledProcessError):
            return False
    else:
        return False


if not is_preload_disabled():
    config.available_features.add('preload')
